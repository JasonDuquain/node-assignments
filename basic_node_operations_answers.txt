1.

Sort definition: 

The command sort works by sorting the file alphabetically by the first character in each line, including letters, numbers, and symbols.
The output is each line rearranged in alphabetical order with the most nested lines being sorted first. In this way, the output is not necessarily
truly alphabetical since each nested indent of code is sorted as a chunk.

Sort output: 

$ sort commands.js
            break;
            break;
            commandLibrary.cat(userInputArray.slice(1));
            commandLibrary.echo(userInputArray.slice(1).join(" "));
            done(data);
            if (err) throw err;
        })
        case "cat":
        case "echo":
        const fileName = fullPath[0];
        done(userInput);
        fs.readFile(fileName, (err, data) => {
    "cat": function(fullPath) {
    "echo": function (userInput) {
    }
    }
    },
    const command = userInputArray[0];
    const userInputArray = userInput.split(" ");
    process.stdout.write('\nprompt > ');
    process.stdout.write(output);
    switch (command) {









}
}
};
const commandLibrary = {
const fs = require("fs");
function done(output) {
function evaluateCmd(userInput) {
module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;


wc definition: 

The wc command counts the number of lines, words, and characters in a file in that order. Notably, the characters count also includes the new line (\n) value that is present at the end of each line.

wc output: 

$ wc commands.js
 40  74 908 commands.js

 
uniq definition: 

Uniq outputs only those lines in a file that are entirely unique. If a line further down a file matches a line that has already been encountered, that
line will not be outputed. In the case of commands.js, the uniq command does not remove any lines as none are unique.

uniq output: 

$ uniq commands.js
const fs = require("fs");

function done(output) {
    process.stdout.write(output);
    process.stdout.write('\nprompt > ');
}

function evaluateCmd(userInput) {

    const userInputArray = userInput.split(" ");
    const command = userInputArray[0];

    switch (command) {
        case "echo":
            commandLibrary.echo(userInputArray.slice(1).join(" "));
            break;
        case "cat":
            commandLibrary.cat(userInputArray.slice(1));
            break;
    }
}

const commandLibrary = {
    "echo": function (userInput) {
        done(userInput);
    },
    "cat": function(fullPath) {
        const fileName = fullPath[0];
        fs.readFile(fileName, (err, data) => {
            if (err) throw err;
            done(data);
        })
    }
};

module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;


2.

1st pipe command and output: 

$ cat commands.js | grep -i commandLibrary
            commandLibrary.echo(userInputArray.slice(1).join(" "));
            commandLibrary.cat(userInputArray.slice(1));
const commandLibrary = {
module.exports.commandLibrary = commandLibrary;

Explanation: 

This 1st concatenate the commands.js file and pipes the output to the grep command. The grep command searches for the commandLibrary string in that output in a case insensitive search.

2nd pipe command and output: 

$ sort commands.js | uniq
            break;
            commandLibrary.cat(userInputArray.slice(1));
            commandLibrary.echo(userInputArray.slice(1).join(" "));
            done(data);
            if (err) throw err;
        })
        case "cat":
        case "echo":
        const fileName = fullPath[0];
        done(userInput);
        fs.readFile(fileName, (err, data) => {
    "cat": function(fullPath) {
    "echo": function (userInput) {
    }
    },
    const command = userInputArray[0];
    const userInputArray = userInput.split(" ");
    process.stdout.write('\nprompt > ');
    process.stdout.write(output);
    switch (command) {

}
};
const commandLibrary = {
const fs = require("fs");
function done(output) {
function evaluateCmd(userInput) {
module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;


Explanation:

This command will first sort the commands.js file alphabetically and then pipe the output of this action to the uniq command which will remove any matching lines. Finally, the entire contents of the commands.js file after these actions are taken is output to the terminal.


6.

function reverseString(inputString) {
    let result = inputString.split(' ');
    let newArray = [];
    
    result.forEach((el, idx) => {
        let reverseString = el.split('').reverse().join('');
        newArray.push(reverseString);
    })
    
    newArray = newArray.join(' ');
    return newArray;
}

console.log(reverseString("I'm learning to program algorithms!"));



